options(warn = -1)
library(tidyverse)
install.packages('tm')
install.packages('Rtools')
library(Rtools)
install.packages('SnowballC')
library(SnowballC)
library(tm)
install.packages('wordcloud')
library(wordcloud)
library(e1071)
install.packages('gmodels')
library(gmodels)
library(ggplot2)
sms_raw <- read.csv("../data.csv")
View(sms_raw)
col_types = cols(X = col_skip(), X.1 = col_skip(), X.2 = col_skip(), v1 = col_factor(levels = c("spam", "ham")))
View(col_types)
sms_raw <- rename(sms_raw, type = v1, text = v2)
View(sms_raw)
sms_raw <- subset(sms_raw, select = -c(X, X.1, X.2))
table(sms_raw$type)
ggplot(aes(x=type),data=sms_raw) +
geom_bar(fill="dark green",width=0.5)
sms_raw[, "text"]  <-  gsub("[^[:alnum:]]", " ", sms_raw$text)
col_types = cols(type = col_factor(levels = c("spam", "ham")))
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
inspect(sms_corpus[1:2])
as.character(sms_corpus[[1]])
lapply(sms_corpus[1:2], as.character)
replacePunctuation <- function(x) { gsub("[[:punct:]]+", " ", x) }
sms_dtm <- DocumentTermMatrix(sms_corpus, control = list(tolower = TRUE, removeNumbers = TRUE, removePunctuation = TRUE, stemming = TRUE))
dim(sms_dtm)
sms_dtm_train <- sms_dtm[1:3900, ]
sms_dtm_test <- sms_dtm[3901:5572, ]
View(sms_dtm_test)
View(sms_dtm_test)
sms_train_labels <- sms_raw[1:3900, ]$type
sms_test_labels <- sms_raw[3901:5572, ]$type
prop.table(table(sms_train_labels))
prop.table(table(sms_test_labels))
spam <- subset(sms_raw, type == "spam")
ham <- subset(sms_raw, type == "ham")
wordcloud(spam$text, min.freq = 50, max.words = 50, colors = brewer.pal(6, 'Dark2'))
wordcloud(spam$text, min.freq = 50, max.words = 50, colors = brewer.pal(6, 'Dark2'), random.order = FALSE)
wordcloud(spam$text, min.freq = 50, colors = brewer.pal(6, 'Dark2'), random.order = FALSE)
wordcloud(spam$text, min.freq = 30, max.words = 50, colors = brewer.pal(6, 'Dark2'), random.order = FALSE)
wordcloud(spam$text, min.freq = 40, max.words = 50, colors = brewer.pal(6, 'Dark2'), random.order = FALSE)
wordcloud(ham$text, min.freq = 50, max.words = 50, colors = brewer.pal(6, 'Dark2'), random.order = FALSE)
wordcloud(ham$text, min.freq = 50, max.words = 60, colors = brewer.pal(6, 'Dark2'), random.order = FALSE)
wordcloud(ham$text, min.freq = 40, max.words = 60, colors = brewer.pal(6, 'Dark2'), random.order = FALSE)
wordcloud(ham$text, min.freq = 40, max.words = 70, colors = brewer.pal(6, 'Dark2'), random.order = FALSE)
wordcloud(ham$text, min.freq = 60, max.words = 60, colors = brewer.pal(6, 'Dark2'), random.order = FALSE)
sms_freq_words <- findFreqTerms(sms_dtm_train, 50)
sms_freq_words <- findFreqTerms(sms_dtm_train, 30)
sms_dtm_freq_train <- sms_dtm_train[ , sms_freq_words]
sms_dtm_freq_test <- sms_dtm_test[ , sms_freq_words]
str(sms_freq_words)
convert_counts <- function(x) {
x <- ifelse(x>0, "Yes", "No")
}
sms_train <- apply(sms_dtm_freq_train, MARGIN = 2, convert_counts)
sms_test <- apply(sms_dtm_freq_test, MARGIN = 2, convert_counts)
sms_classifier <- naiveBayes(sms_train, sms_train_labels)
sms_test_pred <- predict(sms_classifier, sms_test)
CrossTable(sms_test_pred, sms_test_labels,
prop.chisq = FALSE,
prop.c = FALSE,
prop.r = FALSE,
dnn = c('predicted', 'actual'))
conf_matrix <- as.data.frame(table(sms_test_pred, sms_test_labels))
View(conf_matrix)
ggplot(conf_matrix, aes(sms_test_pred, sms_test_labels, fill = Freq)) + geom_tile() + geom_label(aes(label = Freq)) + scale_fill_gradient(low = "#ff7f50", high = "#003767", trans = "log")
ROC <- roc(sms_test_pred, sms_test_labels)
install.packages("verification")
library(verification)
ROC <- roc(sms_test_pred, sms_test_labels)
roc.plot(sms_test_pred, sms_test_labels, print.auc = TRUE)
library(pROC)
plot(sms_raw$type)
plot(spam$type, ham$type)
roc(sms_test_pred, sms_test_labels, plot = TRUE)
View(sms_dtm_freq_test)
View(sms_dtm_freq_test)
View(sms_dtm_freq_train)
View(sms_dtm_freq_train)
View(sms_dtm_test)
View(sms_dtm_train)
ggplot(conf_matrix, aes(sms_test_pred, sms_test_labels, fill = Freq)) + geom_tile() + geom_label(aes(label = Freq)) + scale_fill_gradient(low = "#ff5ce4", high = "#6d73a8", trans = "log")
> ROC <- roc(sms_test_pred, sms_test_labels)
ggplot(conf_matrix, aes(sms_test_pred, sms_test_labels, fill = Freq)) + geom_tile() + geom_label(aes(label = Freq)) + scale_fill_gradient(low = "#fcc368", high = "#6877fc", trans = "log")
plot(varImp(sms_freq_words), 20)
install.packages("varImp")
library(varImp)
plot(varImp(sms_freq_words), 20)
dim(sms_dtm)
View(sms_dtm)
View(sms_dtm)
View(sms_dtm)
data <- read.csv("../data.csv")
data <- read.csv("../data.csv")
data
View(data)
